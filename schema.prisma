datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id               String             @id @default(cuid())
  name             String?
  email            String?            @unique
  emailVerified    DateTime?
  hashedPassword   String?
  image            String?
  accounts         Account[]
  sessions         Session[]
  Transactions     Transactions[]
  ApplicationForms ApplicationForms[]
  Benefits         Benefits[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Transactions {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  amount      Float
  date        DateTime
  created_at  DateTime @default(now())
  coord_x     Float
  coord_y     Float
}


model ApplicationForms {
  id          String   @id @default(cuid())
  userId      String
  name        String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  email       String
  description String
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
}

model Benefits {
  id          String   @id @default(cuid())
  userId      String
  name        String
  email       String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  description String
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
}
